name: Build and Release Theme

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.run_number > 1 && !contains(github.event.head_commit.message, 'NORUN')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch Tags
        run: |
          git fetch --tags
          git tag

      - name: Get and Increment Version
        id: get_version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_TAG"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          while git rev-parse "refs/tags/$NEW_VERSION" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          done
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "ZIP_NAME=no-code-tools-$NEW_VERSION.zip" >> $GITHUB_ENV

      - name: Update Version in style.css
        run: |
          sed -i "s/\(Version:\s*\)[0-9.]*/\1$VERSION/" style.css

      - name: Create version.txt
        run: echo $VERSION > version.txt

      - name: Commit version.txt
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add version.txt
          git commit -m "Force update version.txt to $VERSION"
          git push origin master

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache

      - name: Install minification tools
        run: |
          npm install -g uglify-js clean-css-cli

      - name: Copy files to build-release
        run: |
          mkdir build-release
          rsync -a --exclude=".git*" --exclude=".github" --exclude="*.zip" --exclude="README.md" ./ ./build-release/

      - name: Minify JS and CSS (preserving style.css header)
        run: |
          STYLE_CSS_ORIGINAL="build-release/style.css"
          STYLE_CSS_HEADER="build-release/style-header.css"

          # Sauvegarder l'en-tête
          awk 'BEGIN{found=0} /^\s*$/{if(found==0){print; found=1; exit}} {print}' "$STYLE_CSS_ORIGINAL" > "$STYLE_CSS_HEADER"

          # Minifier tous les JS/CSS sauf .min.*
          find build-release -name "*.js" -not -name "*.min.js" -exec bash -c 'uglifyjs "$0" -o "${0%.js}.min.js"' {} \;
          find build-release -name "*.css" -not -name "*.min.css" -exec bash -c 'cleancss -o "${0%.css}.min.css" "$0"' {} \;

          # Remplacer tous sauf style.css
          find build-release -name "*.min.js" -exec bash -c 'mv "$0" "${0%.min.js}.js"' {} \;
          find build-release -name "*.min.css" ! -name "style.min.css" -exec bash -c 'mv "$0" "${0%.min.css}.css"' {} \;

          # Remplacer style.css en gardant son en-tête
          tail -n +$(($(grep -n -m1 "^\s*$" "$STYLE_CSS_ORIGINAL" | cut -d: -f1)+1)) "$STYLE_CSS_ORIGINAL" > style-body.css
          cleancss -o style-body.min.css style-body.css
          cat "$STYLE_CSS_HEADER" style-body.min.css > "$STYLE_CSS_ORIGINAL"
          rm style-body.css style-body.min.css "$STYLE_CSS_HEADER"

      - name: Create Theme ZIP from build-release
        run: |
          cd build-release
          zip -r ../${ZIP_NAME} * .[^.]*
          cd ..

      - name: Commit style.css (version bump)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add style.css
          git commit -m "Update version to $VERSION" || echo "No changes to commit"
          git push origin master

      - name: Create Git Tag
        run: |
          git tag $VERSION
          git push origin $VERSION

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          body: "Nouvelle version : ${{ env.VERSION }}"
          draft: false
          prerelease: false
          files: |
            ${{ env.ZIP_NAME }}
            version.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
