name: Build and Release Theme

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch Tags
        run: |
          git fetch --tags
          git tag

      - name: Get and Increment Version
        id: get_version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_TAG"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          while git rev-parse "refs/tags/$NEW_VERSION" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          done
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Version in style.css
        run: |
          sed -i "s/\(Version:\s*\)[0-9.]*/\1$VERSION/" style.css
          cat style.css

      - name: Create version.txt
        run: echo $VERSION > version.txt

      - name: Setup Node.js with cache
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install clean-css-cli
        run: npm ci --omit=dev

      - name: Prepare release folder (excluding unminified style.css)
        run: |
          mkdir release-build
          rsync -a --exclude=".git" --exclude=".github" --exclude="README.md" --exclude="*.zip" --exclude="style.css" ./ release-build/

      - name: Rebuild and minify style.css with preserved header
        run: |
          STYLE_SRC="style.css"
          STYLE_DEST="release-build/style.css"

          HEADER=$(sed -n '/^\/\*\*/,/\*\//p' "$STYLE_SRC")
          START_LINE=$(grep -n '*/' "$STYLE_SRC" | head -n1 | cut -d: -f1)
          BODY_START=$((START_LINE + 1))
          tail -n +"$BODY_START" "$STYLE_SRC" > tmp-body.css

          ./node_modules/.bin/cleancss -O2 tmp-body.css -o tmp-body.min.css

          echo "$HEADER" > "$STYLE_DEST"
          echo "" >> "$STYLE_DEST"
          echo "/* === Fichier CSS minifiÃ© automatiquement === */" >> "$STYLE_DEST"
          cat tmp-body.min.css >> "$STYLE_DEST"

      - name: Minify prism/prism.css
        run: |
          PRISM_SRC="prism/prism.css"
          PRISM_DEST="release-build/prism/prism.css"
          if [ -f "$PRISM_SRC" ]; then
            ./node_modules/.bin/cleancss "$PRISM_SRC" -o "$PRISM_DEST"
          fi

      - name: Create Theme ZIP
        run: |
          cd release-build
          zip -r ../ocade-fusion.zip * .[^.]*

      - name: Commit Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add style.css version.txt
          git commit -m "Update version to $VERSION" || echo "No changes to commit"
          git push origin master

      - name: Create Git Tag
        run: |
          git tag $VERSION
          git push origin $VERSION

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          body: "Nouvelle version : ${{ env.VERSION }}"
          draft: false
          prerelease: false
          files: |
            ocade-fusion.zip
            version.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
